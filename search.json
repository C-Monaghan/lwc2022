[{"path":"https://github.com/C-Monaghan/lwc2022/articles/example_data.html","id":"example-dataset","dir":"Articles","previous_headings":"","what":"Example dataset","title":"Example data","text":"small example dataset included lwc2022 package called cog_data. dataset simulates cognitive scores following methodology used Health Retirement (HRS), specifically focusing tasks like word recall, serial subtraction, backwards counting. cognitive tasks core Langa-Weir classification system used assess cognitive function. simulated dataset contains 10 observations follows structure expected functions package (extract(), score(), classify()). , detail steps taken simulate dataset.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/articles/example_data.html","id":"structure-of-the-simulated-data","dir":"Articles","previous_headings":"","what":"Structure of the simulated data","title":"Example data","text":"cog_data dataset contains 35 variable. summary structure presented : dataset contains variables individual identifiers, cognition-related tasks (immediate/delayed word recall, serial subtraction, backwards counting), variables necessary scoring classification.","code":"# Load the package library(lwc2022)  # Load the example dataset data(cog_data)  # Display the structure of cog_data str(cog_data) #> 'data.frame':    10 obs. of  35 variables: #>  $ HHID    : int  288941 234057 224021 785284 326317 465208 748794 293626 669691 689448 #>  $ PN      : int  93 99 72 26 7 42 9 83 36 78 #>  $ SD182M1 : num  17 53 39 63 12 15 32 52 55 7 #>  $ SD182M2 : num  9 51 10 23 27 99 63 7 63 27 #>  $ SD182M3 : num  32 38 25 34 29 5 8 12 13 18 #>  $ SD182M4 : num  33 67 27 25 38 21 15 51 57 26 #>  $ SD182M5 : num  99 31 16 62 30 6 53 8 22 22 #>  $ SD182M6 : num  39 31 58 17 64 60 59 34 4 13 #>  $ SD182M7 : num  5 64 61 25 62 22 25 32 56 25 #>  $ SD182M8 : num  23 35 40 58 30 12 31 67 56 30 #>  $ SD182M9 : num  35 14 29 32 7 3 23 64 96 15 #>  $ SD182M10: num  21 37 8 61 10 60 52 54 34 10 #>  $ SD183M1 : num  22 12 20 56 17 56 64 35 40 56 #>  $ SD183M2 : num  61 30 15 24 59 23 53 7 29 15 #>  $ SD183M3 : num  23 26 38 56 32 7 27 52 5 6 #>  $ SD183M4 : num  16 24 32 21 65 11 36 54 56 99 #>  $ SD183M5 : num  19 25 39 64 26 9 7 34 58 13 #>  $ SD183M6 : num  19 66 62 57 39 4 1 40 30 30 #>  $ SD183M7 : num  62 25 16 24 64 11 58 20 40 3 #>  $ SD183M8 : num  29 36 62 54 22 59 52 98 20 11 #>  $ SD183M9 : num  67 65 8 56 21 55 2 53 13 56 #>  $ SD183M10: num  6 67 8 54 32 96 36 55 14 63 #>  $ SD142   : int  96 90 97 97 99 98 97 91 94 98 #>  $ SD143   : int  86 86 89 90 80 98 89 92 90 90 #>  $ SD144   : int  89 76 89 78 78 74 83 83 75 70 #>  $ SD145   : int  69 76 76 66 68 79 65 77 76 64 #>  $ SD146   : int  69 52 63 50 51 53 59 50 54 57 #>  $ SD124   : int  0 0 0 0 1 1 0 1 0 0 #>  $ SD129   : int  0 1 0 0 0 1 0 0 1 0 #>  $ SD237WA : num  -8 -8 -9 1 0 0 0 1 0 1 #>  $ SD237WC : int  13 17 3 18 2 5 12 13 10 6 #>  $ SD237WT : int  42 42 38 60 48 16 35 36 27 27 #>  $ SD238WA : num  -8 0 -8 -8 -8 -9 1 -8 -8 -8 #>  $ SD238WC : int  9 7 9 4 2 12 9 11 7 13 #>  $ SD238WT : int  37 43 33 19 12 34 21 17 12 30"},{"path":"https://github.com/C-Monaghan/lwc2022/articles/example_data.html","id":"variable-breakdown","dir":"Articles","previous_headings":"Structure of the simulated data","what":"Variable breakdown","title":"Example data","text":"HHID: unique household identifier. PN: unique personal identifier. SD182M01-SD182M10: Responses Immediate Word Recall task. SD183M01-SD183M10: Responses Delayed Word Recall task. SD142-SD146: Responses Serial Subtraction task, participants asked subtract 7 100 iteratively five times. SD124 SD129: Responses Backwards Counting task, participants count backwards 20. SD124 represents first attempt, SD129 represents second attempt. SD237WA-SD237WT SD238WA-SD238WT: Responses mouse clicking test measuring accuracy, click counts, click time.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/articles/example_data.html","id":"generating-the-data","dir":"Articles","previous_headings":"","what":"Generating the data","title":"Example data","text":"generate_example_data() function generates dataset size n=10n = 10, producing set cognitive test variables along unique identifiers. output dataset structured similarly cognitive assessment data collected HRS.","code":"# Simulated dataset generate_example_data <- function(n = 100) {   data.frame(     # Identifiers     HHID = sample(100000:999999, n, replace = TRUE),   # Random household ID     PN = sample(1:99, n, replace = TRUE),              # Random person number      # THESE ARE THE VARIABLES USED IN THE LW CLASSIFICATIONS     # Immediate word recall (10 items)     SD182M1 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD182M2 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD182M3 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD182M4 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD182M5 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD182M6 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD182M7 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD182M8 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD182M9 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD182M10 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),      # Delayed word recall (10 items)     SD183M1 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD183M2 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD183M3 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD183M4 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD183M5 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD183M6 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD183M7 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD183M8 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD183M9 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),     SD183M10 = sample(c(1:40, 51:67, 96, 98, 99), n, replace = TRUE),      # Serial subtraction (Subtracting 7 from 100 five times)     SD142 = sample(90:100, n, replace = TRUE),  # First subtraction value     SD143 = sample(80:99, n, replace = TRUE),   # Second subtraction     SD144 = sample(70:89, n, replace = TRUE),   # Third subtraction     SD145 = sample(60:79, n, replace = TRUE),   # Fourth subtraction     SD146 = sample(50:69, n, replace = TRUE),   # Fifth subtraction      # Backwards counting     SD124 = sample(0:1, n, replace = TRUE),  # Success on first try (1 = success, 0 = fail)     SD129 = sample(0:1, n, replace = TRUE),  # Success on second try (1 = success, 0 = fail)      # RANDOM VARIABLES NOT USED IN LW CLASSIFICATIONS     # Speed Test (Mouse clicking)     SD237WA = sample(c(0, 1, -8, -9), n, replace = TRUE),     SD237WC = sample(c(0, 1, -8, -9), n, replace = TRUE),     SD237WT = sample(c(0, 1, -8, -9), n, replace = TRUE),     SD238WA = sample(c(0, 1, -8, -9), n, replace = TRUE),     SD238WC = sample(c(0, 1, -8, -9), n, replace = TRUE),     SD238WT = sample(c(0, 1, -8, -9), n, replace = TRUE)   ) }"},{"path":"https://github.com/C-Monaghan/lwc2022/articles/example_data.html","id":"parameters","dir":"Articles","previous_headings":"Generating the data","what":"Parameters","title":"Example data","text":"nn: number observations generate (default n=10n = 10)","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/articles/example_data.html","id":"output","dir":"Articles","previous_headings":"Generating the data","what":"Output","title":"Example data","text":"function returns dataframe nn rows following columns: HHID: randomly generated unique household identifier. PN: randomly generated personal number individual. SD182M1 - SD182M10: Responses Immediate Word Recall, values simulated set codes representing different recall categories. SD183M1 - SD183M10: Responses Delayed Word Recall, values similarly simulated . SD142 - SD146: Values serial subtraction task, representing five rounds subtracting 7 100 (random variance errors). SD124 SD129: Binary responses representing success (1) failure (0) two attempts backwards counting. SD237WA SD238WA: Accuracy responses mouse clicking test. Responses represented success (1), failure (0), non participation due technical reasons (-6) refusal participate (-8). SD237WA indicates first attempt SD238WA indicates second attempt. SD237WC SD238WC: Responses representing total number clicks mouse clicking test. SD237WC indicates first attempt SD238WC indicates second attempt. SD237WT SD238WT: Responses representing total amount time (seconds) spent mouse clicking test. SD237WT indicates time first attempt SD238WC indicates time second attempt.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/articles/example_data.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Example data","text":"Example generated cognition data","code":"set.seed(123)  cog_data <- generate_example_data()  knitr::kable(head(cog_data), caption = \"Example of generated cognition data\")"},{"path":"https://github.com/C-Monaghan/lwc2022/articles/lwc2022.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"lwc2022: Generating the Langa-Weir classification of cognitive function for the 2022 Health and Retirement Study cognition data","text":"lwc2022 package specifically developed generation Langa-Weir classification cognitive function 2022 Health Retirement Study (HRS) cognition data. classification system, developed researchers David Weir Kenneth Langa, categorizes individuals cognitive function groups based performance set standardized cognitive assessments. previous waves HRS data (1995 - 2020) researcher contributed dataset dementia classifications (Langa, 2020). dataset widely used research study trajectories cognitive aging, dementia risk, related health outcomes older adults. However, recent release 2022 HRS data, classifications yet updated. , lwc2022 package aims bridge gap providing tools allow researchers apply methodology 2022 cognition data.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/articles/lwc2022.html","id":"methodological-overview-of-langa-weir-classifications","dir":"Articles","previous_headings":"","what":"Methodological Overview of Langa-Weir Classifications","title":"lwc2022: Generating the Langa-Weir classification of cognitive function for the 2022 Health and Retirement Study cognition data","text":"Langa-Weir classification cognitive function based performance several cognitive domains, including: Immediate delayed word recall: tests assess episodic memory asking respondents recall list 10 words immediately delay. Serial subtraction: task measures working memory mental flexibility participants subtract 7 100 five times row. Backwards counting: Respondents asked count backwards 20, tests attention working memory. Langa-Weir methodology involves scoring tasks assigning individuals one three cognitive function categories: Normal cognition Cognitively impaired, demented (CIND) Dementia classification based total cognitive score sums performance across tasks. Cut-thresholds used determine category respondent falls , higher scores indicating better cognitive performance.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/articles/lwc2022.html","id":"what-the-lwc2022-package-provides","dir":"Articles","previous_headings":"","what":"What the lwc2022 package provides","title":"lwc2022: Generating the Langa-Weir classification of cognitive function for the 2022 Health and Retirement Study cognition data","text":"package offers several key functions facilitate generation Langa-Weir classifications 2022 HRS data. functions replicate logic methodology described Langa-Weir Data Description earlier waves. following key functions included: Data extraction: extract() function pulls relevant cognitive test variables HRS dataset. Scoring: score() function calculates cognitive test scores word recall, serial subtraction, backwards counting. Classification: classify() function generates cognitive function classifications based total score, assigning individuals normal cognition, CIND, dementia categories.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/articles/lwc2022.html","id":"replicating-the-methodology","dir":"Articles","previous_headings":"What the lwc2022 package provides","what":"Replicating the Methodology","title":"lwc2022: Generating the Langa-Weir classification of cognitive function for the 2022 Health and Retirement Study cognition data","text":"Immediate Delayed Word Recall: Respondents asked recall set words. scoring rules applied lwc2022 mirror prior waves: score 1 given word correctly recalled, total score immediate delayed recall computed. Serial Subtraction: Respondents asked subtract 7 100, continue subtracting 7 resulting number. Points assigned based number correct subtractions, five. score_subtraction() function handles scoring automatically. Backwards Counting: Respondents asked count backwards 20 1. score 2 points given succeed first try, 1 point succeed second attempt, 0 points otherwise. scoring incorporated score() function. Summing Total Cognitive Score: total cognitive score computed summing scores across tests (word recall, serial subtraction, backwards counting). total score used classify individuals cognitive function groups: Normal Cognition: total score 12 higher. Cognitively Impaired, Demented (CIND): score 7 11. Dementia: score 6 lower","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/articles/lwc2022.html","id":"example-workflow","dir":"Articles","previous_headings":"","what":"Example Workflow","title":"lwc2022: Generating the Langa-Weir classification of cognitive function for the 2022 Health and Retirement Study cognition data","text":"","code":"# Installing package # devtools::install_github(\"C-Monaghan/lwc2022\")  # Loading package library(lwc2022)  # Load the example dataset data(cog_data)  # Extract the relevant cognitive test variables extracted_data <- extract(cog_data)  # Score the cognitive tests scored_data <- score(extracted_data)  # Classify individuals based on their total cognitive score classified_data <- classify(scored_data)  # View the first few rows of the classified data head(classified_data) #>     HHID PN imrc_imp2022 dlrc_imp2022 ser7_imp2022 bwc20_imp2022 #> 1 288941 93            9            7            0             0 #> 2 234057 99            6            7            0             1 #> 3 224021 72            8            8            0             0 #> 4 785284 26            6            3            1             0 #> 5 326317  7            8            7            0             2 #> 6 465208 42            7            6            0             2 #>   cogtot27_imp2022 cogfunction2022 #> 1               16               1 #> 2               14               1 #> 3               16               1 #> 4               10               2 #> 5               17               1 #> 6               15               1"},{"path":"https://github.com/C-Monaghan/lwc2022/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cormac Monaghan. Copyright holder, author, maintainer. Rafael de Andrade Moral. Author. Joanna McHugh Power. Author.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Monaghan C, de Andrade Moral R, McHugh Power J (2024). lwc2022: Langa-Weir Classification Cognitive Function 2022 HRS Data. R package version 0.0.0.9000, https://c-monaghan.github.io/lwc2022/, https://github.com/C-Monaghan/lwc2022.","code":"@Manual{,   title = {lwc2022: Langa-Weir Classification of Cognitive Function for 2022 HRS Data},   author = {Cormac Monaghan and Rafael {de Andrade Moral} and Joanna {McHugh Power}},   year = {2024},   note = {R package version 0.0.0.9000, https://c-monaghan.github.io/lwc2022/},   url = {https://github.com/C-Monaghan/lwc2022}, }"},{"path":"https://github.com/C-Monaghan/lwc2022/index.html","id":"lwc2022","dir":"","previous_headings":"","what":"Langa-Weir Classification of Cognitive Function for 2022 HRS Data","title":"Langa-Weir Classification of Cognitive Function for 2022 HRS Data","text":"lwc2022 package designed generate Langa-Weir classification cognitive function 2022 Health Retirement Study (HRS) cognition data. previous waves HRS data (1995 - 2020) researcher contributed dataset dementia classifications. However, recent release 2022 HRS data, classifications yet updated. , lwc2022 package aims provide tools allow researchers apply classification methodology 2022 cognition data. examine full vignette check : lwc2022","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/index.html","id":"installing-the-package","dir":"","previous_headings":"","what":"Installing the package","title":"Langa-Weir Classification of Cognitive Function for 2022 HRS Data","text":"install Github {r} # install.packages(\"devtools\") devtools::install_github(\"C-Monaghan/lwc2022\") Next, load package {r} library(lwc2022)","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Cognitive Function Based on Total Scores — classify","title":"Classify Cognitive Function Based on Total Scores — classify","text":"function classifies individuals cognitive function groups based total cognition score, calculated immediate word recall, delayed word recall, serial subtraction, backwards counting scores. classification creates three categories cognitive function.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Cognitive Function Based on Total Scores — classify","text":"","code":"classify(data)"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Cognitive Function Based on Total Scores — classify","text":"data dataframe containing cognitive test scores, including total immediate word recall, delayed word recall, serial subtraction, backwards counting scores.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Cognitive Function Based on Total Scores — classify","text":"dataframe : Total_cog_score: Total cognitive score (sum individual task scores). Class: Cognitive function classification (1 = Normal, 2 = Cognitive impairment dementia, 3 = Demented). Renamed columns updated labels 2022 data: imrc_imp2022, dlrc_imp2022, ser7_imp2022, bwc20_imp2022, cogtot27_imp2022, cogfunction2022.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/classify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify Cognitive Function Based on Total Scores — classify","text":"function creates total cognitive score summing scores immediate word recall, delayed word recall, serial subtraction, backwards counting. classifies cognitive function three levels: Class 1: Normal (total score >= 12). Class 2: Cognitive impairment dementia (total score 7 11). Class 3: Demented (total score <= 6).","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/classify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify Cognitive Function Based on Total Scores — classify","text":"","code":"# Assuming `cog_data` is a dataframe with the relevant columns classified_data <- classify(cog_data_score)"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/cog_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Cognition Data — cog_data","title":"Cognition Data — cog_data","text":"simulated dataset cognition test scores, following methodology Health Retirement Study (HRS). dataset includes immediate word recall, delayed word recall, serial subtraction, backwards counting tasks, mouse click clicking scores representing cognitive performance tests.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/cog_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cognition Data — cog_data","text":"","code":"cog_data"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/cog_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cognition Data — cog_data","text":"dataframe 10 rows 35 variables: HHID Household identifier, unique 6-digit integer. PN Person number, unique 1- 2-digit integer within household. SD182M1 Immediate word recall test score first word. SD182M2 Immediate word recall test score second word. SD182M3 Immediate word recall test score third word. SD182M4 Immediate word recall test score fourth word. SD182M5 Immediate word recall test score fifth word. SD182M6 Immediate word recall test score sixth word. SD182M7 Immediate word recall test score seventh word. SD182M8 Immediate word recall test score eight word. SD182M9 Immediate word recall test score ninth word. SD182M10 Immediate word recall test score tenth word. SD183M1 Delayed word recall test score first word. SD183M2 Delayed word recall test score second word. SD183M3 Delayed word recall test score third word. SD183M4 Delayed word recall test score fourth word. SD183M5 Delayed word recall test score fifth word. SD183M6 Delayed word recall test score sixth word. SD183M7 Delayed word recall test score seventh word. SD183M8 Delayed word recall test score eight word. SD183M9 Delayed word recall test score ninth word. SD183M10 Delayed word recall test score tenth word. SD142 Serial subtraction, result subtracting 7 100. SD143 Serial subtraction, result subtracting 7 previous number. SD144 Serial subtraction, result subtracting 7 previous number. SD145 Serial subtraction, result subtracting 7 previous number. SD146 Serial subtraction, result subtracting 7 previous number. SD124 Backwards counting test, success first attempt (1 = success, 0 = fail). SD129 Backwards counting test, success second attempt (1 = success, 0 = fail). SD237WA Mouse clicking test: accuracy result (first attemp) SD237WC Mouse clicking test: total click count (first attemp) SD237WT Mouse clicking test: total time spent (seconds; first attempt) SD238WA Mouse clicking test: accuracy result (second attemp) SD238WC Mouse clicking test: total click count (second attemp) SD238WT Mouse clicking test: total time spent (seconds; second attempt)","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/cog_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cognition Data — cog_data","text":"","code":"# Load the data data(cog_data)  # View the first few rows head(cog_data) #>     HHID PN SD182M1 SD182M2 SD182M3 SD182M4 SD182M5 SD182M6 SD182M7 SD182M8 #> 1 288941 93      17       9      32      33      99      39       5      23 #> 2 234057 99      53      51      38      67      31      31      64      35 #> 3 224021 72      39      10      25      27      16      58      61      40 #> 4 785284 26      63      23      34      25      62      17      25      58 #> 5 326317  7      12      27      29      38      30      64      62      30 #> 6 465208 42      15      99       5      21       6      60      22      12 #>   SD182M9 SD182M10 SD183M1 SD183M2 SD183M3 SD183M4 SD183M5 SD183M6 SD183M7 #> 1      35       21      22      61      23      16      19      19      62 #> 2      14       37      12      30      26      24      25      66      25 #> 3      29        8      20      15      38      32      39      62      16 #> 4      32       61      56      24      56      21      64      57      24 #> 5       7       10      17      59      32      65      26      39      64 #> 6       3       60      56      23       7      11       9       4      11 #>   SD183M8 SD183M9 SD183M10 SD142 SD143 SD144 SD145 SD146 SD124 SD129 SD237WA #> 1      29      67        6    96    86    89    69    69     0     0      -8 #> 2      36      65       67    90    86    76    76    52     0     1      -8 #> 3      62       8        8    97    89    89    76    63     0     0      -9 #> 4      54      56       54    97    90    78    66    50     0     0       1 #> 5      22      21       32    99    80    78    68    51     1     0       0 #> 6      59      55       96    98    98    74    79    53     1     1       0 #>   SD237WC SD237WT SD238WA SD238WC SD238WT #> 1      13      42      -8       9      37 #> 2      17      42       0       7      43 #> 3       3      38      -8       9      33 #> 4      18      60      -8       4      19 #> 5       2      48      -8       2      12 #> 6       5      16      -9      12      34"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/cog_data_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Scored Cognition Data — cog_data_score","title":"Scored Cognition Data — cog_data_score","text":"simulated dataset scored cognition test results. dataset contains calculated total scores immediate recall, delayed recall, serial subtraction.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/cog_data_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scored Cognition Data — cog_data_score","text":"","code":"cog_data_score"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/cog_data_score.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Scored Cognition Data — cog_data_score","text":"dataframe 10 rows 6 variables: HHID Household identifier, unique 6-digit integer. PN Person number, unique 1- 2-digit integer within household. Total_I Total immediate word recall score, ranging 0 5 (sum 5 items immediate recall test). Total_D Total delayed word recall score, ranging 0 5 (sum 5 items delayed recall test). Total_Sub Total serial subtraction score, ranging 0 5 (sum successful subtractions serial subtraction test). Total_Count Total backwards counting score, ranging 0 2 (2 points success first try, 1 point success second try, 0 failure).","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/cog_data_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scored Cognition Data — cog_data_score","text":"","code":"# Load the data data(cog_data_score)  # View the first few rows head(cog_data_score) #>     HHID PN Total_I Total_D Total_Sub Total_Count #> 1 288941 93       9       7         0           0 #> 2 234057 99       6       7         0           1 #> 3 224021 72       8       8         0           0 #> 4 785284 26       6       3         1           0 #> 5 326317  7       8       7         0           2 #> 6 465208 42       7       6         0           2"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Key Cognitive Measures from Dataset — extract","title":"Extract Key Cognitive Measures from Dataset — extract","text":"function extracts specific cognitive measures dataset, including immediate delayed word recall, serial subtraction, backwards counting, along household person identifiers.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Key Cognitive Measures from Dataset — extract","text":"","code":"extract(data)"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Key Cognitive Measures from Dataset — extract","text":"data dataframe containing full dataset specific variables selected.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Key Cognitive Measures from Dataset — extract","text":"dataframe following variables: HHID: Household ID. PN: Person number (individual identifier). Immediate delayed word recall variables (columns starting \"SD182M\" \"SD183M\"). Serial subtraction variables (SD142 SD146). Backwards counting variables (SD124, SD129).","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Key Cognitive Measures from Dataset — extract","text":"function selects key cognitive test results identifiers dataset. uses dplyr::select() retrieve: Immediate delayed word recall variables (starting \"SD182M\" \"SD183M\"). Serial subtraction results (SD142 SD146). Backwards counting variables (SD124, SD129).","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Key Cognitive Measures from Dataset — extract","text":"","code":"# Assuming `cog_data` is a dataframe with the relevant columns extract(cog_data) #>      HHID PN SD182M1 SD182M2 SD182M3 SD182M4 SD182M5 SD182M6 SD182M7 SD182M8 #> 1  288941 93      17       9      32      33      99      39       5      23 #> 2  234057 99      53      51      38      67      31      31      64      35 #> 3  224021 72      39      10      25      27      16      58      61      40 #> 4  785284 26      63      23      34      25      62      17      25      58 #> 5  326317  7      12      27      29      38      30      64      62      30 #> 6  465208 42      15      99       5      21       6      60      22      12 #> 7  748794  9      32      63       8      15      53      59      25      31 #> 8  293626 83      52       7      12      51       8      34      32      67 #> 9  669691 36      55      63      13      57      22       4      56      56 #> 10 689448 78       7      27      18      26      22      13      25      30 #>    SD182M9 SD182M10 SD183M1 SD183M2 SD183M3 SD183M4 SD183M5 SD183M6 SD183M7 #> 1       35       21      22      61      23      16      19      19      62 #> 2       14       37      12      30      26      24      25      66      25 #> 3       29        8      20      15      38      32      39      62      16 #> 4       32       61      56      24      56      21      64      57      24 #> 5        7       10      17      59      32      65      26      39      64 #> 6        3       60      56      23       7      11       9       4      11 #> 7       23       52      64      53      27      36       7       1      58 #> 8       64       54      35       7      52      54      34      40      20 #> 9       96       34      40      29       5      56      58      30      40 #> 10      15       10      56      15       6      99      13      30       3 #>    SD183M8 SD183M9 SD183M10 SD142 SD143 SD144 SD145 SD146 SD124 SD129 #> 1       29      67        6    96    86    89    69    69     0     0 #> 2       36      65       67    90    86    76    76    52     0     1 #> 3       62       8        8    97    89    89    76    63     0     0 #> 4       54      56       54    97    90    78    66    50     0     0 #> 5       22      21       32    99    80    78    68    51     1     0 #> 6       59      55       96    98    98    74    79    53     1     1 #> 7       52       2       36    97    89    83    65    59     0     0 #> 8       98      53       55    91    92    83    77    50     1     0 #> 9       20      13       14    94    90    75    76    54     0     1 #> 10      11      56       63    98    90    70    64    57     0     0"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cognitive Test Scores — score","title":"Calculate Cognitive Test Scores — score","text":"function calculates various cognitive test scores dataset, including word recall, serial subtraction, backwards counting. computes total scores immediate delayed word recall, scores serial subtraction tasks, total score backwards counting.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cognitive Test Scores — score","text":"","code":"score(data)"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cognitive Test Scores — score","text":"data dataframe containing cognitive test data, including columns word recall, serial subtraction, backwards counting tasks.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cognitive Test Scores — score","text":"dataframe following computed scores: Total_I: Total score immediate word recall. Total_D: Total score delayed word recall. Total_Sub: Total score serial subtraction. Total_Count: Total score backwards counting.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Cognitive Test Scores — score","text":"function applies scoring functions cognitive test data: Word recall: Scores immediate delayed recall using score_recall function, computes total scores. Serial subtraction: Applies score_subtraction function calculate scores subtraction step, computes total score. Backwards counting: Assigns 2 points correct counting first try, 1 point correct counting second try, 0 incorrect counting.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cognitive Test Scores — score","text":"","code":"# Assuming `cog_data` is a dataframe with the relevant columns scored_data <- score(cog_data)"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_recall.html","id":null,"dir":"Reference","previous_headings":"","what":"Score Word Recall Task — score_recall","title":"Score Word Recall Task — score_recall","text":"function scores word recall task respondents given 1 correct recall 0 incorrect recall. Missing values (NA) retained NA output.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_recall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score Word Recall Task — score_recall","text":"","code":"score_recall(x)"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_recall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score Word Recall Task — score_recall","text":"x numeric vector representing respondents' word recall responses. Specific numeric codes used define incorrect responses.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_recall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score Word Recall Task — score_recall","text":"numeric vector : 1: Correct recall. 0: Incorrect recall (based specific codes). NA: original value missing, remains NA.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_recall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Score Word Recall Task — score_recall","text":"function assigns score 1 correct word recall. Incorrect recall determined specific numeric codes (51 67, 96, 98, 99) assigned score 0. NA values input remain NA output.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_recall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score Word Recall Task — score_recall","text":"","code":"responses <- c(53, 62, 100, NA, 66) score_recall(responses) #> [1]  0  0  1 NA  0"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_subtraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Score Serial Subtraction Task — score_subtraction","title":"Score Serial Subtraction Task — score_subtraction","text":"function scores serial subtraction task respondents scored based ability successfully subtract specific value (e.g., 7) previous value. score 1 given correct subtraction, score 0 given incorrect subtraction. However, respondent can still receive score 1 recover initial mistake correctly subtracting later.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_subtraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score Serial Subtraction Task — score_subtraction","text":"","code":"score_subtraction(val, diff)"},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_subtraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score Serial Subtraction Task — score_subtraction","text":"val numeric vector representing respondent's current answer. diff numeric vector representing correct difference (e.g., expected subtraction value).","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_subtraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score Serial Subtraction Task — score_subtraction","text":"numeric vector : 1: Correct subtraction. 0: Incorrect subtraction. NA: original value missing (NA), remains NA.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_subtraction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Score Serial Subtraction Task — score_subtraction","text":"function checks respondent's answer (val) equal correct subtraction difference (diff). , awarded score 1. make mistake, get 0. However, correct mistake next step, can receive score 1 step. Missing values (NA) input remain NA output.","code":""},{"path":"https://github.com/C-Monaghan/lwc2022/reference/score_subtraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score Serial Subtraction Task — score_subtraction","text":"","code":"responses <- c(93, 86, 79, 72, NA) correct_diffs <- c(93, 86, 79, 72, 65) - 7 score_subtraction(responses, correct_diffs) #> [1]  0  0  0  0 NA"}]
